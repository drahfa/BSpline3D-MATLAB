function cylinderCurvatureCombs(CPs, CPw, n_station)
% CYLINDERCURVATURECOMBS Cylinder reconstruction with curvature comb visuals.
%
% This helper mirrors cylinderExample while adding curvature comb
% visualisations over the reconstructed surface, covering per-station curve
% combs, surface iso-parametric combs, and orthogonal section planes.
% Copyright (c) 2008-2025 Ahmad Faisal Mohamad Ayob, VSG Labs
%
% INPUTS:
%   CPs       - Number of control points per station (default: 8)
%   CPw       - Number of control points in longitudinal direction (default: 4)
%   n_station - Number of stations along the cylinder (default: 30)
%
% The cylinder is generated by translating a circular cross-section along
% the X-axis at uniform spacing.

if nargin < 1 || isempty(CPs)
    CPs = 8;
end
if nargin < 2 || isempty(CPw)
    CPw = 4;
end
if nargin < 3 || isempty(n_station)
    n_station = 10;
end

YZ = load('circle.dat');
numSamples = size(YZ, 1);

X = ones(numSamples, 1);
deltaX = 5;

station = struct('x', cell(1, n_station), ...
                 'y', cell(1, n_station), ...
                 'z', cell(1, n_station));

for i = 1:n_station
    XYZ = [X YZ];
    station(i).x = XYZ(:, 1)';
    station(i).y = XYZ(:, 2)';
    station(i).z = XYZ(:, 3)';
    X = X + deltaX;
end

[cpX, cpY, cpZ, stationMSE, waterlineMSE] = BSplineFit3(CPs, CPw, station);
fprintf('Cylinder fit metrics -> Station MSE: %.4f | Waterline MSE: %.4f\n', ...
    stationMSE, waterlineMSE);

[~, ~, surfaceData] = analyzeSmoothness(cpX, cpY, cpZ);
colormapChoice = parula(256);

fig = figure('Name', 'Cylinder Curvature Combs', 'Position', [80 80 1350 480]);
t = tiledlayout(fig, 1, 3, 'TileSpacing', 'compact', 'Padding', 'compact');

% Mode 1: Curve comb on a representative station
ax1 = nexttile(t, 1);
stationIdx = max(1, round(n_station / 2));
stationCurve = [station(stationIdx).x', station(stationIdx).y', station(stationIdx).z'];
plotCurveCurvatureComb(stationCurve, ...
    'Axes', ax1, ...
    'CombSpacing', max(4, round(numSamples / 20)), ...
    'CombColormap', colormapChoice, ...
    'CurveLineWidth', 2.0);
view(ax1, [90 0]);
axis(ax1, 'equal');
ax1.Box = 'on';
ax1.Title.String = sprintf('Station Curve Comb (Station %d)', stationIdx);

ax2 = nexttile(t, 2);
axes(ax2);
plotCurvatureCombs(surfaceData, ...
    'Direction', 'both', ...
    'NumCurves', 8, ...
    'IncludeEdges', true, ...
    'CombSpacing', 6, ...
    'SurfaceAlpha', 0.18, ...
    'CombColormap', colormapChoice, ...
    'BaseCurveLineWidth', 1.4, ...
    'CombLineWidth', 1.6);
view(ax2, [-40 20]);
ax2.Box = 'on';
ax2.Title.String = 'Surface Iso-curve Combs';

ax3 = nexttile(t, 3);
lengthAxis = surfaceData.points(:, :, 1);
sectionPlanes = linspace(min(lengthAxis, [], 'all'), max(lengthAxis, [], 'all'), 5);
sectionPlanes = sectionPlanes(2:4);
plotSectionCurvatureCombs(surfaceData, ...
    'Axis', 'x', ...
    'Values', sectionPlanes, ...
    'Axes', ax3, ...
    'CombSpacing', 6, ...
    'SurfaceAlpha', 0.08, ...
    'CombColormap', colormapChoice, ...
    'CurveLineWidth', 1.6, ...
    'CombLineWidth', 1.5);
view(ax3, [-40 20]);
ax3.Box = 'on';
ax3.Title.String = 'Section Plane Combs';

title(t, 'Curvature Comb Modes on Reconstructed Cylinder');
end
